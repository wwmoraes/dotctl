name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
    - master
    tags:
    - '*'
    paths:
    - .github/workflows/integration.yml
    - .coveragerc
    - .mypy.ini
    - sonar-project.properties
    - Pipfile
    - Pipfile.lock
    - src/**.py
    - tests/**.py
    - pyproject.toml
    - setup.py
  pull_request:
    branches:
    - master
    paths:
    - .github/workflows/integration.yml
    - .coveragerc
    - .mypy.ini
    - sonar-project.properties
    - Pipfile
    - Pipfile.lock
    - src/**.py
    - tests/**.py
    - pyproject.toml
    - setup.py

env:
  PYTHON_VERSION: 3.x
  WORK_DIR: /usr/src
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: install pipenv
      run: python -m pip install --upgrade pipenv wheel
    - name: cache pipenv
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
          ${{ runner.os }}-pipenv-
    - name: install dependencies
      run: |
        rm -rf .venv
        mkdir -p .venv
        pipenv install -d
    - name: lint
      run: pipenv run lint
    - name: upload lint report
      uses: actions/upload-artifact@v2
      # TODO convert yapf diff to be ingested by sonar
      if: ${{ false }}
      # if: always()
      with:
        name: lint-report
        path: lint-report.xml
  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: generate docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: ${{ github.repository }}-test
        # yamllint disable rule:line-length
        label-custom: |
          org.opencontainers.image.authors=${{ secrets.OCI_AUTHORS }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.vendor=${{ secrets.OCI_AUTHORS }}
        # yamllint enable rule:line-length
        github-token: ${{ github.token }}
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
    - name: cache buildx
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${{ runner.temp }}/.buildx-cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore') }}
          ${{ runner.os }}-buildx-
    - name: build test image
      uses: docker/build-push-action@v2
      with:
        push: false
        load: true
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-to: |
          type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache
        cache-from: |
          type=local,src=${{ runner.temp }}/.buildx-cache
          type=local,src=${{ runner.temp }}/.buildx-cache
          ${{ steps.docker_meta.outputs.tags }}
        tags: ${{ steps.docker_meta.outputs.tags }}
    # - name: build test
    #   uses: ./.github/actions/build-test
    # - name: setup python
    #   uses: actions/setup-python@v2
    #   with:
    #     python-version: ${{ env.PYTHON_VERSION }}
    # - name: install pipenv
    #   run: python -m pip install --upgrade pipenv wheel
    # - name: cache pipenv
    #   uses: pat-s/always-upload-cache@v2.1.3
    #   with:
    #     path: ~/.cache/pipenv
    #     key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
    #       ${{ runner.os }}-pipenv-
    # - name: install dependencies
      # run: |
      #   rm -rf .venv
      #   mkdir -p .venv
      #   pipenv install -d
    - name: cache pytest
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: .pytest_cache
        key: ${{ runner.os }}-pytest-${{ hashFiles('Pipfile', 'Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pytest-${{ hashFiles('Pipfile', 'Pipfile.lock') }}
          ${{ runner.os }}-pytest-
    - name: run test
      uses: ./.github/actions/run-test
      with:
        pytest-cache-dir: .pytest_cache
        root-dir: ${{ github.workspace }}
        image-name: ${{ github.repository }}-test
        image-tag: ${{ steps.docker_meta.outputs.version }}
    # - name: test
    #   run: |
    #     pipenv run coverage
    #     pipenv run coverage-xml
    - name: upload coverage report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: coverage-report
        path: coverage.xml
    - name: upload test report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-report
        path: test-report.xml
  report:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: cache sonar scanner
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${{ runner.temp }}/sonar-scanner/cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-sonar-scanner-cache-${{ hashFiles('**/sonar-project.properties') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-sonar-scanner-cache-${{ hashFiles('**/sonar-project.properties') }}
          ${{ runner.os }}-sonar-scanner-cache-
        # yamllint enable rule:line-length
    - name: download lint report
      uses: actions/download-artifact@v2
      # TODO convert yapf diff to be ingested by sonar
      if: ${{ false }}
      with:
        name: lint-report
    - name: download test report
      uses: actions/download-artifact@v2
      with:
        name: test-report
    - name: download coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
    - name: run sonar scanner
      uses: wwmoraes/actions/sonar-scanner@master
      with:
        token: ${{ secrets.SONAR_TOKEN }}
        work-dir: ${{ env.WORK_DIR }}
        home: ${{ runner.temp }}/sonar-scanner
